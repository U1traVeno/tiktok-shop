// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package cart

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/U1traVeno/tiktok-shop/biz/dal/model"
)

func newCartItems(db *gorm.DB, opts ...gen.DOOption) cartItems {
	_cartItems := cartItems{}

	_cartItems.cartItemsDo.UseDB(db, opts...)
	_cartItems.cartItemsDo.UseModel(&model.CartItems{})

	tableName := _cartItems.cartItemsDo.TableName()
	_cartItems.ALL = field.NewAsterisk(tableName)
	_cartItems.ID = field.NewUint(tableName, "id")
	_cartItems.CreatedAt = field.NewTime(tableName, "created_at")
	_cartItems.UpdatedAt = field.NewTime(tableName, "updated_at")
	_cartItems.DeletedAt = field.NewField(tableName, "deleted_at")
	_cartItems.CartId = field.NewUint32(tableName, "cart_id")
	_cartItems.ProductId = field.NewUint32(tableName, "product_id")
	_cartItems.Quantity = field.NewUint32(tableName, "quantity")

	_cartItems.fillFieldMap()

	return _cartItems
}

type cartItems struct {
	cartItemsDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	CartId    field.Uint32
	ProductId field.Uint32
	Quantity  field.Uint32

	fieldMap map[string]field.Expr
}

func (c cartItems) Table(newTableName string) *cartItems {
	c.cartItemsDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cartItems) As(alias string) *cartItems {
	c.cartItemsDo.DO = *(c.cartItemsDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cartItems) updateTableName(table string) *cartItems {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.CartId = field.NewUint32(table, "cart_id")
	c.ProductId = field.NewUint32(table, "product_id")
	c.Quantity = field.NewUint32(table, "quantity")

	c.fillFieldMap()

	return c
}

func (c *cartItems) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cartItems) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 7)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["cart_id"] = c.CartId
	c.fieldMap["product_id"] = c.ProductId
	c.fieldMap["quantity"] = c.Quantity
}

func (c cartItems) clone(db *gorm.DB) cartItems {
	c.cartItemsDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cartItems) replaceDB(db *gorm.DB) cartItems {
	c.cartItemsDo.ReplaceDB(db)
	return c
}

type cartItemsDo struct{ gen.DO }

type ICartItemsDo interface {
	gen.SubQuery
	Debug() ICartItemsDo
	WithContext(ctx context.Context) ICartItemsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICartItemsDo
	WriteDB() ICartItemsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICartItemsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICartItemsDo
	Not(conds ...gen.Condition) ICartItemsDo
	Or(conds ...gen.Condition) ICartItemsDo
	Select(conds ...field.Expr) ICartItemsDo
	Where(conds ...gen.Condition) ICartItemsDo
	Order(conds ...field.Expr) ICartItemsDo
	Distinct(cols ...field.Expr) ICartItemsDo
	Omit(cols ...field.Expr) ICartItemsDo
	Join(table schema.Tabler, on ...field.Expr) ICartItemsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICartItemsDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICartItemsDo
	Group(cols ...field.Expr) ICartItemsDo
	Having(conds ...gen.Condition) ICartItemsDo
	Limit(limit int) ICartItemsDo
	Offset(offset int) ICartItemsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICartItemsDo
	Unscoped() ICartItemsDo
	Create(values ...*model.CartItems) error
	CreateInBatches(values []*model.CartItems, batchSize int) error
	Save(values ...*model.CartItems) error
	First() (*model.CartItems, error)
	Take() (*model.CartItems, error)
	Last() (*model.CartItems, error)
	Find() ([]*model.CartItems, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CartItems, err error)
	FindInBatches(result *[]*model.CartItems, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CartItems) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICartItemsDo
	Assign(attrs ...field.AssignExpr) ICartItemsDo
	Joins(fields ...field.RelationField) ICartItemsDo
	Preload(fields ...field.RelationField) ICartItemsDo
	FirstOrInit() (*model.CartItems, error)
	FirstOrCreate() (*model.CartItems, error)
	FindByPage(offset int, limit int) (result []*model.CartItems, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICartItemsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cartItemsDo) Debug() ICartItemsDo {
	return c.withDO(c.DO.Debug())
}

func (c cartItemsDo) WithContext(ctx context.Context) ICartItemsDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cartItemsDo) ReadDB() ICartItemsDo {
	return c.Clauses(dbresolver.Read)
}

func (c cartItemsDo) WriteDB() ICartItemsDo {
	return c.Clauses(dbresolver.Write)
}

func (c cartItemsDo) Session(config *gorm.Session) ICartItemsDo {
	return c.withDO(c.DO.Session(config))
}

func (c cartItemsDo) Clauses(conds ...clause.Expression) ICartItemsDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cartItemsDo) Returning(value interface{}, columns ...string) ICartItemsDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cartItemsDo) Not(conds ...gen.Condition) ICartItemsDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cartItemsDo) Or(conds ...gen.Condition) ICartItemsDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cartItemsDo) Select(conds ...field.Expr) ICartItemsDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cartItemsDo) Where(conds ...gen.Condition) ICartItemsDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cartItemsDo) Order(conds ...field.Expr) ICartItemsDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cartItemsDo) Distinct(cols ...field.Expr) ICartItemsDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cartItemsDo) Omit(cols ...field.Expr) ICartItemsDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cartItemsDo) Join(table schema.Tabler, on ...field.Expr) ICartItemsDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cartItemsDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICartItemsDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cartItemsDo) RightJoin(table schema.Tabler, on ...field.Expr) ICartItemsDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cartItemsDo) Group(cols ...field.Expr) ICartItemsDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cartItemsDo) Having(conds ...gen.Condition) ICartItemsDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cartItemsDo) Limit(limit int) ICartItemsDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cartItemsDo) Offset(offset int) ICartItemsDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cartItemsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICartItemsDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cartItemsDo) Unscoped() ICartItemsDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cartItemsDo) Create(values ...*model.CartItems) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cartItemsDo) CreateInBatches(values []*model.CartItems, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cartItemsDo) Save(values ...*model.CartItems) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cartItemsDo) First() (*model.CartItems, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartItems), nil
	}
}

func (c cartItemsDo) Take() (*model.CartItems, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartItems), nil
	}
}

func (c cartItemsDo) Last() (*model.CartItems, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartItems), nil
	}
}

func (c cartItemsDo) Find() ([]*model.CartItems, error) {
	result, err := c.DO.Find()
	return result.([]*model.CartItems), err
}

func (c cartItemsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CartItems, err error) {
	buf := make([]*model.CartItems, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cartItemsDo) FindInBatches(result *[]*model.CartItems, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cartItemsDo) Attrs(attrs ...field.AssignExpr) ICartItemsDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cartItemsDo) Assign(attrs ...field.AssignExpr) ICartItemsDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cartItemsDo) Joins(fields ...field.RelationField) ICartItemsDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cartItemsDo) Preload(fields ...field.RelationField) ICartItemsDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cartItemsDo) FirstOrInit() (*model.CartItems, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartItems), nil
	}
}

func (c cartItemsDo) FirstOrCreate() (*model.CartItems, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartItems), nil
	}
}

func (c cartItemsDo) FindByPage(offset int, limit int) (result []*model.CartItems, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cartItemsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cartItemsDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cartItemsDo) Delete(models ...*model.CartItems) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cartItemsDo) withDO(do gen.Dao) *cartItemsDo {
	c.DO = *do.(*gen.DO)
	return c
}
