// Code generated by hertz generator.

package cart

import (
	"context"
	"github.com/U1traVeno/tiktok-shop/biz/dal/db"
	"github.com/U1traVeno/tiktok-shop/biz/dal/model"
	query "github.com/U1traVeno/tiktok-shop/biz/dal/query/cart"
	cart "github.com/U1traVeno/tiktok-shop/biz/model/cart"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/joho/godotenv"
	"log"
)

// CreateCart .
// @router /cart [GET]
func CreateCart(ctx context.Context, c *app.RequestContext) {
	var err error
	var req cart.CreateCartReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = godotenv.Load()
	if err != nil {
		log.Fatalf("Error loading .env file: %v", err)
	}

	db, err := db.Init()
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	query.SetDefault(db)

	newCart := model.Cart{
		UserId: req.UserId,
	}

	findCart, _ := query.Cart.Where(query.Cart.UserId.Eq(req.UserId)).Take()
	if findCart != nil {
		c.String(consts.StatusBadRequest, "用户购物车已存在")
		return
	}

	err = query.Cart.Create(&newCart)
	if err != nil {
		log.Printf("Failed to create cart: %v", err)
		c.String(consts.StatusInternalServerError, "创建购物车失败%s", err)
		return
	}

	resp := &cart.CreateCartResp{
		Info: "success create cart",
	}

	c.JSON(consts.StatusOK, resp)
}

// AddItem .
// @router /cart/item [POST]
func AddItem(ctx context.Context, c *app.RequestContext) {
	var err error
	var req cart.AddItemReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(cart.AddItemResp)

	c.JSON(consts.StatusOK, resp)
}

// GetCart .
// @router /cart/get [GET]
func GetCart(ctx context.Context, c *app.RequestContext) {
	var err error
	var req cart.GetCartReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(cart.GetCartResp)

	c.JSON(consts.StatusOK, resp)
}

// EmptyCart .
// @router /cart/empty [DELETE]
func EmptyCart(ctx context.Context, c *app.RequestContext) {
	var err error
	var req cart.EmptyCartReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	Db, err := db.Init()
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}
	query.SetDefault(Db)

	findCart, _ := query.Cart.Where(query.Cart.UserId.Eq(req.UserId)).Take()
	if findCart == nil {
		c.String(consts.StatusBadRequest, "用户购物车不存在")
		return
	}

	_, _ = query.Cart.Where(query.Cart.UserId.Eq(req.UserId), query.Cart.CartId.Eq(findCart.CartId)).Delete()

	_, _ = query.Cart.Where(query.CartItems.CartId.Eq(findCart.CartId)).Delete()

	resp := &cart.EmptyCartResp{}

	c.JSON(consts.StatusOK, resp)
}
