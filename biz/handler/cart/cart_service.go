// Code generated by hertz generator.

package cart

import (
	"context"
	"fmt"
	"github.com/U1traVeno/tiktok-shop/biz/dal/model"
	query "github.com/U1traVeno/tiktok-shop/biz/dal/query/cart"
	cart "github.com/U1traVeno/tiktok-shop/biz/model/cart"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/joho/godotenv"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"log"
	"os"
)

// CreateCart .
// @router /cart [GET]
func CreateCart(ctx context.Context, c *app.RequestContext) {
	var err error
	var req cart.CreateCartReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = godotenv.Load()
	if err != nil {
		log.Fatalf("Error loading .env file: %v", err)
	}

	// 从环境变量读取数据库配置
	dbUser := os.Getenv("DB_USER")
	dbPassword := os.Getenv("DB_PASSWORD")
	dbHost := os.Getenv("DB_HOST")
	dbPort := os.Getenv("DB_PORT")
	dbName := os.Getenv("DB_NAME")

	if dbUser == "" || dbPassword == "" || dbHost == "" || dbPort == "" || dbName == "" {
		panic("database configuration is not fully set in .env file")
	}

	// 构建 DSN
	dsn := fmt.Sprintf(
		"user=%s password=%s host=%s port=%s dbname=%s sslmode=disable TimeZone=Asia/Shanghai search_path=xd_schema",
		dbUser, dbPassword, dbHost, dbPort, dbName,
	)
	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	query.SetDefault(db)

	newCart := model.Cart{
		UserId: req.UserId,
	}

	err = query.Cart.Create(&newCart)
	if err != nil {
		log.Printf("Failed to create cart: %v", err)
		c.String(consts.StatusInternalServerError, "创建购物车失败%s", err)
		return
	}

	resp := &cart.CreateCartResp{
		Info: "success create cart",
	}

	c.JSON(consts.StatusOK, resp)
}

// AddItem .
// @router /cart/item [POST]
func AddItem(ctx context.Context, c *app.RequestContext) {
	var err error
	var req cart.AddItemReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(cart.AddItemResp)

	c.JSON(consts.StatusOK, resp)
}

// GetCart .
// @router /cart/get [GET]
func GetCart(ctx context.Context, c *app.RequestContext) {
	var err error
	var req cart.GetCartReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(cart.GetCartResp)

	c.JSON(consts.StatusOK, resp)
}

// EmptyCart .
// @router /cart/empty [DELETE]
func EmptyCart(ctx context.Context, c *app.RequestContext) {
	var err error
	var req cart.EmptyCartReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(cart.EmptyCartResp)

	c.JSON(consts.StatusOK, resp)
}
